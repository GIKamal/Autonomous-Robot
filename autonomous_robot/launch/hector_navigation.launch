<launch>
  <!-- RPLiDAR -->
  <include file="$(find autonomous_robot)/launch/rplidar.launch"/>

  <!-- Load URDF into the ROS Parameter Server -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find autonomous_robot)/urdf/robot.urdf'" />

  <!-- Launch Gazebo with the custom world -->
  <!-- <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find autonomous_robot)/worlds/empty.world" />
    <arg name="paused" value="false" />
    <arg name="use_sim_time" value="true" />
    <arg name="gui" value="true" />
    <arg name="headless" value="false" />
    <arg name="debug" value="false" />
  </include> -->

  <!-- Spawn the robot in Gazebo -->
  <!-- <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model my_robot -x 0 -y 0 -z 0.1" /> -->

  <!-- Robot State Publisher -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
    <param name="publish_frequency" value="50.0" />
  </node>

  <!-- Joint State Publisher -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  <!-- Launch RViz -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find autonomous_robot)/rviz/navigation.rviz" required="true" />

  <!-- AMCL -->
  <include file="$(find autonomous_robot)/launch/amcl.launch" />

  <!-- Map Server -->
  <node pkg="map_server" type="map_server" name="map_server" args="$(find autonomous_robot)/maps/map.yaml" />

  <!-- Move Base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <!-- load costmap and planner configuration files -->
    <rosparam file="$(find autonomous_robot)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find autonomous_robot)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find autonomous_robot)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find autonomous_robot)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find autonomous_robot)/config/base_local_planner_params.yaml" command="load" />
    <!-- planner parameters -->
    <param name="base_global_planner" value="navfn/NavfnROS"/>
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
  </node>

  <!-- Fake Odometry -->
  <!-- <node pkg="autonomous_robot" type="pose_to_odom.py" name="pose_to_odom" output="screen" /> -->

  <!-- Launch teleop_twist_keyboard -->
  <node name="teleop_twist_keyboard" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" output="screen" />  

  <!-- Static transform from base_link to laser -->
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0 0 0.45 0 0 0 base_link laser 100" />

  <!-- motor control -->
  <node name="motor_control_node" pkg="autonomous_robot" type="motor_controller.py" output="screen"/>

  <!-- Static transform from map to base_link -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_base_link" args="0 0 0 0 0 0 map base_link 100"/> -->
</launch>